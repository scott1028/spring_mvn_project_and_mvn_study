<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Unique id in .m2 Folder groupID is path, artifactID is name -->
  <!-- 這個在 .m2 資料夾內是唯一性的 -->
  <!-- 會按照 com/mycompany/app/* 來放到系統錄境內  -->
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-webapp</artifactId>

  <!-- main is .war file, library is .jar file -->
  <!-- 主程式為 .war File -->
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>my-webapp Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  <!-- like variable define -->
  <properties>
    <maven-compiler-plugin-version>3.1</maven-compiler-plugin-version>
    <maven-war-plugin-version>2.3</maven-war-plugin-version>
    <!-- service container -->
    <jetty-version>6.1.26</jetty-version>
    <jetty-running-port>8081</jetty-running-port>
    <jetty-context-path>/</jetty-context-path>
    <tomcat-context-path>/</tomcat-context-path>
    <tomcat-running-port>8081</tomcat-running-port>
    <java_opts>-Xms256m -Xmx512m -XX:MaxPermSize=64m</java_opts>
  </properties>

  <!-- Like Python PIP, NodeJS NPM....etc -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
      <!-- Spring webmvc library files -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>3.2.5.RELEASE</version>
      </dependency>
      
      <!-- Servlet library files -->
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>3.0.1</version>
        <scope>provided</scope>
      </dependency>

      <!-- You can add own module ( path at Home/.m2/* , first run: mvn install to build it to .m2 folder ) -->
      <!--
      <dependency>
          <artifactId>my-app</artifactId>
          <groupId>com.mycompany.app</groupId>
          <version>1.0-SNAPSHOT</version>
      </dependency>
      -->
  </dependencies>

  <!-- when executing mvn tomcat7:run will invoke that will not be include to .war file -->
  <build>
    <plugins>
      
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>${maven-war-plugin-version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin-version}</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      
      <!-- mvn tomcat7:run, 指定使用 Tomcat7 -->
      <plugin>
          <groupId>org.apache.tomcat.maven</groupId>
          <artifactId>tomcat7-maven-plugin</artifactId>

          <version>2.1</version>
          <configuration>
            <path>${tomcat-context-path}</path>
            <port>${tomcat-running-port}</port>
            <charset>utf-8</charset>
            <systemProperties>
              <JAVA_OPTS>${java_opts}</JAVA_OPTS>
            </systemProperties>
          </configuration>

          <!-- 
            You also can type this to run server:
                java -jar "target\my-webapp Maven Webapp-standalone.jar" -httpPort=8081
          -->
          <!-- 如果你希望用 Java 執行執行的指令
          <executions>
            <execution>
              <id>tomcat-run</id>
              <goals>
                <goal>exec-war-only</goal>
              </goals>
              <phase>package</phase>
              <configuration>
                <path>/</path>
                <enableNaming>false</enableNaming>
                <finalName>${name}-standalone.jar</finalName>
              </configuration>
            </execution>
          </executions>
          -->
      </plugin>
    </plugins>
  </build>
</project>

<!-- 啟動伺服器步驟 -->
<!-- 
  mvn clean install -Dmaven.test.skip=true
  mvn tomcat7:run
-->
